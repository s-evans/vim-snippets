# http://kgroll.com/blog/2010/10/03/vhdl-snippets-for-vim
#

# Component declaration
snippet comp
	component ${1:identifier} is
	  port (
	    ${2:--I/O}
	  );
	end component $1;
# Component instantiation
snippet compinst
	$1_inst : ${1:--component name}
	  port map (
	    ${2:-- component_port => port_association,}
	  );

# Constant declaration
snippet const
	constant ${1:NAME} : ${2:type} := ${3:value};${4}

# D Flip Flop process
snippet ff
	process(${1:clk}) is
	begin
	  if (rising_edge($1)) then
	    ${2:sigR} <= ${3:sig};
	  end if;
	end process;

# D Flip Flop process with asynch. reset
snippet ffr
	process(${1:clk}, ${2:rst}) is
	begin
	  if ($2 = ${3:'0'}) then
	    ${4:sigR} <= ${5:'0'};
	  elsif (rising_edge($1)) then
	    $4 <= ${6:sig};
	  end if;
	end process;

# D Flip Flop process with asynch. reset and clock enable
snippet ffre
	process(${1:clk}, ${2:rst}) is
	begin
	  if ($2 = ${3:'0'}) then
	    ${4:sigR} <= ${5:'0'};
	  elsif (rising_edge($1)) then
	    if (${6:clkEn} = ${7:'1'}) then
	      $4 <= ${8:sig};
	    end if;
	  end if;
	end process;

# Else if...
snippet ei
	elsif (${1:--condition}) then
	  ${2:--do something else};
# Process (plain)
snippet proc
	${1:proc name} : process is
	begin
	  ${2:--sequential statements;}
	end process $1;

# std_logic;
snippet sl
	std_logic;${1}

# std_logic_vector(xx downto 0);
snippet slv
	std_logic_vector(${1:xx} downto ${2:0});${3}

# Type Declaration
snippet td
	type ${1:identifier} is ${2:definition};${3}
# Subtype Declaration
snippet st
	subtype ${1:identifier} is ${2:subtype indication};${3}







=======
#
## Libraries

snippet lib
	library ${1}
	use ${1}.${2}

# Standard Libraries
snippet libs
	library IEEE;
	use IEEE.std_logic_1164.ALL;
	use IEEE.numeric_std.ALL;

# Xilinx Library
snippet libx
	library UNISIM;
	use UNISIM.VCOMPONENTS.ALL;

## Entity Declaration
snippet ent
	entity ${1:`vim_snippets#Filename()`} is
		generic (
			${2}
		);
		port (
			${3}
		);
	end entity $1;

## Architecture
snippet arc
	architecture ${1:behav} of ${2:`vim_snippets#Filename()`} is

		${3}

	begin


	end $1;

## Declarations
# std_logic
snippet st
	signal ${1} : std_logic;
# std_logic_vector
snippet sv
	signal ${1} : std_logic_vector (${2} downto 0);
# std_logic in
snippet ist
	${1} : in std_logic;
# std_logic_vector in
snippet isv
	${1} : in std_logic_vector (${2} downto 0);
# std_logic out
snippet ost
	${1} : out std_logic;
# std_logic_vector out
snippet osv
	${1} : out std_logic_vector (${2} downto 0);
# unsigned
snippet un
	signal ${1} : unsigned (${2} downto 0);
## Process Statements
# process
snippet pr
	process (${1})
	begin
		${2}
	end process;
# process with clock
snippet prc
	process (${1:clk})
	begin
		if rising_edge ($1) then
			${2}
		end if;
	end process;
# process all
snippet pra
	process (${1:all})
	begin
		${2}
	end process;
## Control Statements
# if
snippet if
	if ${1} then
		${2}
	end if;
# if
snippet ife
	if ${1} then
		${2}
	else
		${3}
	end if;
# else
snippet el
	else
		${1}
# if
snippet eif
	elsif ${1} then
		${2}
# case
snippet ca
	case ${1} is
		${2}
	end case;
# when
snippet wh
	when ${1} =>
		${2}
# for
snippet for
	for ${1:i} in ${2} ${3:to} ${4} loop
		${5}
	end loop;
# while
snippet wh
	while ${1} loop
		${2}
	end loop;
## Misc
# others
snippet oth
	(others => '${1:0}');
