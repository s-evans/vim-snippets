# TODO:
# boost; file I/O and stream junk;
##
## Keywords
snippet string std
	std::string
snippet op
	operator${1}( ${2} )
snippet try
	try {
		${1}
	} catch ( ${2:T}& ${3:name} ) {
		${4}
	}
snippet catch
	catch ( ${1:T}& ${2:name} ) {
		${3}
	}
snippet throw
	throw ${1:value};
snippet static_cast
	static_cast<${1:T}>( ${2:value} )
snippet dynamic_cast
	dynamic_cast<${1:T}>( ${2:value} )
snippet reinterpret_cast
	reinterpret_cast<${1:T}>( ${2:value} )
snippet lexical_cast
	boost::lexical_cast<${1:T}>( ${2:value} )
snippet template
	template<${1}>
snippet classname
	classname ${1}
snippet typename
	typename ${1}
##
## Allocation
snippet n
	new ${1};
snippet na
	new ${1}[${2}];
snippet pn
	new (${1}) ${2};
snippet pna
	new (${1}) ${2}[${3}];
snippet d
	delete ${1};
snippet da
	delete[] ${1};
## 
## Boost
## 
## Time
##
## Threading
## 
## ASIO
##
## Networking
##
## Algorithms
snippet to_upper boost::algorithm
	boost::algorithm::to_upper( ${1:string} )
snippet to_upper_copy boost::algorithm
	boost::algorithm::to_upper_copy( ${1:string} )
snippet to_lower boost::algorithm
	boost::algorithm::to_lower( ${1:string} )
snippet to_lower_copy boost::algorithm
	boost::algorithm::to_lower_copy( ${1:string} )
snippet trim boost::algorithm
	boost::algorithm::trim( ${1:string} )
snippet trim_if boost::algorithm
	boost::algorithm::trim_if( ${1:string}, ${2:unary_predicate} )
snippet trim_copy boost::algorithm
	boost::algorithm::trim_copy( ${1:string} )
snippet trim_copy_if boost::algorithm
	boost::algorithm::trim_copy_if( ${1:string}, ${2:unary_predicate} )
snippet trim_left boost::algorithm
	boost::algorithm::trim_left( ${1:string} )
snippet trim_left_if boost::algorithm
	boost::algorithm::trim_left_if( ${1:string}, ${2:unary_predicate} )
snippet trim_left_copy boost::algorithm
	boost::algorithm::trim_left_copy( ${1:string} )
snippet trim_left_copy_if boost::algorithm
	boost::algorithm::trim_left_copy_if( ${1:string}, ${2:unary_predicate} )
snippet trim_right boost::algorithm
	boost::algorithm::trim_right( ${1:string} )
snippet trim_right_if boost::algorithm
	boost::algorithm::trim_right_if( ${1:string}, ${2:unary_predicate} )
snippet trim_right_copy boost::algorithm
	boost::algorithm::trim_right_copy( ${1:string} )
snippet trim_right_copy_if boost::algorithm
	boost::algorithm::trim_right_copy_if( ${1:string}, ${2:unary_predicate} )
snippet split boost::algorithm
	boost::algorithm::split( ${1:vector}, ${2:string}, ${3:unary_predicate} )
snippet join boost::algorithm
	boost::algorithm::join( ${1:vector}, ${2:separator} )
snippet replace_first_copy boost::algorithm
	boost::algorithm::replace_first_copy( ${1:string}, ${2:find}, ${3:replace} )
snippet replace_nth_copy boost::algorithm
	boost::algorithm::replace_nth_copy( ${1:string}, ${2:find}, ${3:n}, ${4:replace} )
snippet replace_last_copy boost::algorithm
	boost::algorithm::replace_last_copy( ${1:string}, ${2:find}, ${3:replace} )
snippet replace_all_copy boost::algorithm
	boost::algorithm::replace_all_copy( ${1:string}, ${2:find}, ${3:replace} )
snippet replace_head_copy boost::algorithm
	boost::algorithm::replace_head_copy( ${1:string}, ${2:find}, ${3:replace} )
snippet replace_tail_copy boost::algorithm
	boost::algorithm::replace_tail_copy( ${1:string}, ${2:find}, ${3:replace} )
snippet erase_first_copy boost::algorithm
	boost::algorithm::erase_first_copy( ${1:string}, ${2:find} )
snippet erase_nth_copy boost::algorithm
	boost::algorithm::erase_nth_copy( ${1:string}, ${2:find} )
snippet erase_last_copy boost::algorithm
	boost::algorithm::erase_last_copy( ${1:string}, ${2:find} )
snippet erase_all_copy boost::algorithm
	boost::algorithm::erase_all_copy( ${1:string}, ${2:find} )
snippet erase_head_copy boost::algorithm
	boost::algorithm::erase_head_copy( ${1:string}, ${2:find} )
snippet erase_tail_copy boost::algorithm
	boost::algorithm::erase_tail_copy( ${1:string}, ${2:find} )
snippet find_first boost::algorithm
	boost::algorithm::find_first( ${1:string}, ${2:find} )
snippet find_last boost::algorithm
	boost::algorithm::find_last( ${1:string}, ${2:find} )
snippet find_nth boost::algorithm
	boost::algorithm::find_nth( ${1:string}, ${2:find}, ${3:n} )
snippet find_head boost::algorithm
	boost::algorithm::find_head( ${1:string}, ${2:find} )
snippet find_tail boost::algorithm
	boost::algorithm::find_tail( ${1:string}, ${2:find} )
snippet starts_with boost::algorithm
	boost::algorithm::starts_with( ${1:string}, ${2:find} )
snippet ends_with boost::algorithm
	boost::algorithm::ends_with( ${1:string}, ${2:find} )
snippet contains boost::algorithm
	boost::algorithm::contains( ${1:string}, ${2:find} )
snippet is_space boost::algorithm
	boost::algorithm::is_space()
snippet is_alnum boost::algorithm
	boost::algorithm::is_alnum()
snippet is_alpha boost::algorithm
	boost::algorithm::is_alpha()
snippet is_cntrl boost::algorithm
	boost::algorithm::is_cntrl()
snippet is_digit boost::algorithm
	boost::algorithm::is_digit()
snippet is_graph boost::algorithm
	boost::algorithm::is_graph()
snippet is_lower boost::algorithm
	boost::algorithm::is_lower()
snippet is_print boost::algorithm
	boost::algorithm::is_print()
snippet is_punct boost::algorithm
	boost::algorithm::is_punct()
snippet is_upper boost::algorithm
	boost::algorithm::is_upper()
snippet is_any_of boost::algorithm
	boost::algorithm::is_any_of( ${1:string} )
snippet is_from_range boost::algorithm
	boost::algorithm::is_from_range( ${1:from}, ${2:to} )
## 
## Regex
snippet regex_match boost
	boost::regex_match( ${1:string}, ${3:regex} )
snippet regex_search boost
	boost::regex_search( ${1:string}, ${2:smatch}, ${3:regex} )
snippet regex_replace boost
	boost::regex_replace( ${1:string}, ${2:regex}, ${3:replace_format_string} )
snippet smatch boost
	boost::smatch
snippet regex boost
	boost::regex
## 
## Multi-index
snippet multi_index_container boost::multi_index
	boost::multi_index::multi_index_container<${1:T}, ${2:indexed_by}>
snippet indexed_by boost::multi_index
	boost::multi_index::indexed_by<${1:T}, ${2:T}> 
snippet hashed_non_unique boost::multi_index
	boost::multi_index::hashed_non_unique<${1:T}>
snippet hashed_unique boost::multi_index
	boost::multi_index::hashed_unique<${1:T}>
snippet member boost::multi_index
	boost::multi_index::member<${1:T}, ${2:T_member_type}, ${3:T_member_name}>
snippet ordered_unique boost::multi_index
	boost::multi_index::ordered_unique<${1:T}>
snippet identity boost::multi_index
	boost::multi_index::identity<${1:T}>
snippet ordered_non_unique boost::multi_index
	boost::multi_index::ordered_non_unique<${1:T}>
snippet random_access boost::multi_index
	boost::multi_index::random_access<>
snippet sequenced boost::multi_index
	boost::multi_index::sequenced<>
snippet nth_index boost::multi_index
	nth_index<${1:number}>::type::iterator
##
## Smart pointers
snippet unique_ptr std
	std::unique_ptr<${1:T}>
snippet auto_ptr std
	std::auto_ptr<${1:T}>
snippet scoped_ptr boost
	boost::scoped_ptr<${1:T}>
snippet scoped_array boost
	boost::scoped_array<${1:T}>
snippet shared_ptr boost
	boost::shared_ptr<${1:T}>
snippet shared_array boost
	boost::shared_array<${1:T}>
snippet weak_ptr boost
	boost::weak_ptr<${1:T}>
snippet intrusive_ptr boost
	boost::intrusive_ptr<${1:T}>
snippet ptr_deque boost
	boost::ptr_deque<${1:T}>
snippet ptr_list boost
	boost::ptr_list<${1:T}>
snippet ptr_set boost
	boost::ptr_set<${1:T}>
snippet ptr_map boost
	boost::ptr_map<${1:key}, ${2:T}>
snippet ptr_multiset boost
	boost::ptr_multiset<${1:T}>
snippet ptr_multimap boost
	boost::ptr_multimap<${1:key}, ${2:T}>
snippet ptr_unordered_set boost
	boost::ptr_unordered_set<${1:T}>
snippet ptr_unordered_map boost
	boost::ptr_unordered_map<${1:T}>
snippet ptr_vector boost
	boost::ptr_vector<${1:T}>
##
## Filesystem
snippet path boost::filesystem
	boost::filesystem::path
snippet filesystem_error boost::filesystem
	boost::filesystem::filesystem_error
snippet file_status boost::filesystem
	boost::filesystem::file_status
snippet status boost::filesystem
	boost::filesystem::status( ${1:path} )
snippet space_info boost::filesystem
	boost::filesystem::space_info
snippet space boost::filesystem
	boost::filesystem::space( ${1:path} )
snippet is_directory boost::filesystem
	boost::filesystem::is_directory( ${1:path} )
snippet is_regular_file boost::filesystem
	boost::filesystem::is_regular_file( ${1:path} )
snippet is_symlink boost::filesystem
	boost::filesystem::is_symlink( ${1:path} )
snippet exists boost::filesystem
	boost::filesystem::exists( ${1:path} )
snippet symlink_status boost::filesystem
	boost::filesystem::symlink_status( ${1:path} )
snippet file_size boost::filesystem
	boost::filesystem::file_size( ${1:path} )
snippet last_write_time boost::filesystem
	boost::filesystem::last_write_time( ${1:path} )
snippet rename boost::filesystem
	boost::filesystem::rename( ${1:current}, ${2:new} )
snippet remove  boost::filesystem
	boost::filesystem::remove( ${1:path} )
snippet create_directory boost::filesystem
	boost::filesystem::create_directory( ${1:path} )
snippet complete boost::filesystem
	boost::filesystem::complete( ${1:path} )
snippet current_path boost::filesystem
	boost::filesystem::current_path()
##
## Function objects
snippet bind std
	boost::bind( ${1:function}, ${2:arguments} )
snippet mem_fn std
	boost::mem_fn( ${1:function} )
snippet ref std
	boost::ref( ${1:value} )
snippet cref std
	boost::cref( ${1:value} )
snippet not1 std
	std::not1( ${1:unary_predicate} )
snippet not2 std
	std::not2( ${1:binary_predicate} )
snippet less std
	std::less<${1:T}>()
snippet less_equal std
	std::less_equal<${1:T}>()
snippet greater std
	std::greater<${1:T}>()
snippet greater_equal std
	std::greater_equal<${1:T}>()
snippet minus std
	std::minus<${1:T}>()
snippet plus std
	std::plus<${1:T}>()
snippet equal_to std
	std::equal_to<${1:T}>()
snippet not_equal_to std
	std::not_equal_to<${1:T}>()
snippet negate std
	std::negate<${1:T}>()
snippet divides std
	std::divides<${1:T}>()
snippet multiplies std
	std::multiplies<${1:T}>()
snippet modulus std
	std::modulus<${1:T}>()
snippet mem_fun std
	std::mem_fun( ${1:function} )
snippet mem_fun_ref std
	std::mem_fun_ref( ${1:function} )
snippet unary_function std
	std::unary_function<${1:Arg}, ${2:Result}>
snippet binary_function std
	std::binary_function<${1:Arg1}, ${2:Arg2}, ${3:Result}>
##
## STL Algorithms
snippet any_of std
	${3:std}::any_of( ${1:collection}.begin(), $1.end(), ${2:unary_predicate} )
snippet all_of std
	${3:std}::all_of( ${1:collection}.begin(), $1.end(), ${2:unary_predicate} )
snippet none_of std
	${3:std}::none_of( ${1:collection}.begin(), $1.end(), ${2:unary_predicate} )
snippet for_each std
	std::for_each( ${1:collection}.begin(), $1.end(), ${2:unary_functor} )
snippet count std
	std::count( ${1:collection}.begin(), $1.end(), ${2:value} )
snippet count_if std
	std::count_if( ${1:collection}.begin(), $1.end(), ${2:unary_predicate} )
snippet mismatch std
	std::mismatch( ${1:collection}.begin(), $1.end(), ${2:collection}.begin() )
snippet equal:collection std
	std::equal( ${1:collection}.begin(), $1.end(), ${2:collection}.begin() )
snippet transform std
	std::transform( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), ${3:functor} );
snippet copy std
	std::copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin() );
snippet copy_if std
	std::copy_if( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), ${3:unary_predicate} );
snippet remove std
	std::remove( ${1:collection}.begin(), $1.end(), ${2:value} );
snippet remove_if std
	std::remove_if( ${1:collection}.begin(), $1.end(), ${2:unary_predicate} );
snippet replace std
	std::replace( ${1:collection}.begin(), $1.end(), ${2:old_value}, ${3:new_value} );
snippet replace_if std
	std::replace_if( ${1:collection}.begin(), $1.end(), ${2:unary_predicate}, ${3:new_value} );
snippet replace_copy std
	std::replace_copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), ${3:old_value}, ${4:new_value} );
snippet replace_copy_if std
	std::replace_copy_if( ${1:collection}.begin(), $1.end(), ${2:destination}.begin(), ${3:unary_predicate}, ${4:new_value} );
snippet rotate std
	std::rotate( ${1:collection}.begin(), ${2:new_begin_element}, $1.end() );
snippet rotate_copy std
	std::rotate_copy( ${1:collection}.begin(), ${2:new_begin_element}, $1.end(), ${3:destination}.begin() );
snippet unique Default binary predicate (std::less)
	std::unique( ${1:collection}.begin(), $1.end() );
snippet unique User defined binary predicate
	std::unique( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet unique_copy Default binary predicate (std::less)
	std::unique_copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin() );
snippet unique_copy User defined binary predicate
	std::unique_copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), ${3:binary_predicate} );
snippet sort Default binary predicate (std::less)
	std::sort( ${1:collection}.begin(), $1.end() );
snippet sort User defined binary predicate
	std::sort( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet partial_sort Default binary predicate (std::less)
	std::partial_sort( ${1:collection}.begin(), ${2:middle_iter}, $1.end() );
snippet partial_sort User defined binary predicate
	std::partial_sort( ${1:collection}.begin(), ${2:middle_iter}, $1.end(), ${3:binary_predicate} );
snippet partial_sort_copy Default binary predicate (std::less)
	std::partial_sort_copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), $2.end() );
snippet partial_sort_copy User defined binary predicate
	std::partial_sort_copy( ${1:source}.begin(), $1.end(), ${2:destination}.begin(), $2.end(), ${3:binary_predicate} );
snippet stable_sort Default binary predicate (std::less)
	std::stable_sort( ${1:collection}.begin(), $1.end() );
snippet stable_sort User defined binary predicate
	std::stable_sort( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet nth_element Default binary predicate (std::less)
	std::nth_element( ${1:collection}.begin(), ${2:nth_element}, $1.end() );
snippet nth_element User defined binary predicate
	std::nth_element( ${1:collection}.begin(), ${2:nth_element}, $1.end(), ${3:binary_predicate} );
snippet lower_bound Default binary predicate (std::less)
	std::lower_bound( ${1:collection}.begin(), $1.end(), ${2:value} )
snippet lower_bound User defined binary predicate
	std::lower_bound( ${1:collection}.begin(), $1.end(), ${2:value}, ${3:binary_predicate} )
snippet upper_bound Default binary predicate (std::less)
	std::upper_bound( ${1:collection}.begin(), $1.end(), ${2:value} )
snippet upper_bound User defined binary predicate
	std::upper_bound( ${1:collection}.begin(), $1.end(), ${2:value}, ${3:binary_predicate} )
snippet binary_search Default binary predicate (std::less)
	std::binary_search( ${1:collection}.begin(), $1.end(), ${2:value} )
snippet binary_search User defined binary predicate
	std::binary_search( ${1:collection}.begin(), $1.end(), ${2:value}, ${3:binary_predicate} )
snippet equal_range Default binary predicate (std::less)
	std::equal_range( ${1:collection}.begin(), $1.end(), ${2:value} )
snippet equal_range User defined binary predicate
	std::equal_range( ${1:collection}.begin(), $1.end(), ${2:value}, ${3:binary_predicate} )
snippet merge Default binary predicate (std::less)
	std::merge( ${1:left}.begin(), $1.end(), ${2:right}.begin(), $2.end(), ${3:destination}.begin() );
snippet merge User defined binary predicate
	std::merge( ${1:left}.begin(), $1.end(), ${2:right}.begin(), $2.end(), ${3:destination}.begin(), ${4:binary_predicate} );
snippet inplace_merge Default binary predicate (std::less)
	std::inplace_merge( ${1:first}, ${2:middle}, ${3:last} );
snippet inplace_merge User defined binary predicate
	std::inplace_merge( ${1:first}, ${2:middle}, ${3:last}, ${4:binary_predicate} );
snippet includes Default binary predicate (std::less)
	std::includes( ${1:haystack}.begin(), $1.end(), ${2:needle}.begin(), $2.end() )
snippet includes User defined binary predicate
	std::includes( ${1:haystack}.begin(), $1.end(), ${2:needle}.begin(), $2.end(), ${3:binary_predicate} )
snippet set_difference Default binary predicate (std::less)
	std::set_difference( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin() );
snippet set_difference User defined binary predicate
	std::set_difference( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin(), ${4:binary_predicate} );
snippet set_intersection Default binary predicate (std::less)
	std::set_intersection( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin() );
snippet set_intersection User defined binary predicate
	std::set_intersection( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin(), ${4:binary_predicate} );
snippet set_symmetric_difference Default binary predicate (std::less)
	std::set_symmetric_difference( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin() );
snippet set_symmetric_difference User defined binary predicate
	std::set_symmetric_difference( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin(), ${4:binary_predicate} );
snippet set_union Default binary predicate (std::less)
	std::set_union( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin() );
snippet set_union User defined binary predicate
	std::set_union( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:destination}.begin(), ${4:binary_predicate} );
snippet is_heap std
	${2:std}::is_heap( ${1:collection}.begin(), $1.end() )
snippet make_heap Default binary predicate (std::less)
	std::make_heap( ${1:collection}.begin(), $1.end() );
snippet make_heap User defined binary predicate
	std::make_heap( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet push_heap Default binary predicate (std::less)
	std::push_heap( ${1:collection}.begin(), $1.end() );
snippet push_heap User defined binary predicate
	std::push_heap( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet pop_heap Default binary predicate (std::less)
	std::pop_heap( ${1:collection}.begin(), $1.end() );
snippet pop_heap User defined binary predicate
	std::pop_heap( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet sort_heap Default binary predicate (std::less)
	std::sort_heap( ${1:collection}.begin(), $1.end() );
snippet sort_heap User defined binary predicate
	std::sort_heap( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} );
snippet minmax Default binary predicate (std::less)
	${3:std}::minmax( ${1:lhs}, ${2:rhs} )
snippet minmax User defined binary predicate
	${4:std}::minmax( ${1:lhs}, ${2:rhs}, ${3:binary_predicate} )
snippet minmax_element Default binary predicate (std::less)
	${2:std}::minmax_element( ${1:collection}.begin(), $1.end() )
snippet minmax User defined binary predicate
	${3:std}::minmax_element( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} )
snippet max Default binary predicate (std::less)
	std::max( ${1:lhs}, ${2:rhs} )
snippet max User defined binary predicate
	std::max( ${1:lhs}, ${2:rhs}, ${3:binary_predicate} )
snippet max_element Default binary predicate (std::less)
	std::max_element( ${1:collection}.begin(), $1.end() )
snippet max_element User defined binary predicate
	std::max_element( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} )
snippet min Default binary predicate (std::less)
	std::min( ${1:lhs}, ${2:rhs} )
snippet min User defined binary predicate
	std::min( ${1:lhs}, ${2:rhs}, ${3:binary_predicate} )
snippet min_element Default binary predicate (std::less)
	std::min_element( ${1:collection}.begin(), $1.end() )
snippet min_element User defined binary predicate
	std::min_element( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} )
snippet lexicographical_compare Default binary predicate (std::less)
	std::lexicographical_compare( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end() )
snippet lexicographical_compare User defined binary predicate
	std::lexicographical_compare( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), $2.end(), ${3:binary_predicate} )
snippet is_permutation Default binary predicate (std::less)
	${3:std}::is_permutation( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin() )
snippet is_permutation User defined binary predicate
	${4:std}::is_permutation( ${1:lhs}.begin(), $1.end(), ${2:rhs}.begin(), ${3:binary_predicate} )
snippet next_permutation Default binary predicate (std::less)
	std::next_permutation( ${1:collection}.begin(), $1.end() )
snippet next_permutation User defined binary predicate
	std::next_permutation( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} )
snippet prev_permutation Default binary predicate (std::less)
	std::prev_permutation( ${1:collection}.begin(), $1.end() )
snippet prev_permutation User defined binary predicate
	std::prev_permutation( ${1:collection}.begin(), $1.end(), ${2:binary_predicate} )
##
## STL Collections
snippet array std
	std::array<${1:T}, ${2:N}> ${3};
snippet vector std
	std::vector<${1:T}> ${2};
snippet deque std
	std::deque<${1:T}> ${2};
snippet flist std
	std::forward_list<${1:T}> ${2};
snippet list std
	std::list<${1:T}> ${2};
snippet set std
	std::set<${1:T}> ${2};
snippet map std
	std::map<${1:Key}, ${2:T}> ${3};
snippet mset std
	std::multiset<${1:T}> ${2};
snippet mmap std
	std::multimap<${1:Key}, ${2:T}> ${3};
snippet uset std
	std::unordered_set<${1:T}> ${2};
snippet umap std
	std::unordered_map<${1:Key}, ${2:T}> ${3};
snippet umset std
	std::unordered_multiset<${1:T}> ${2};
snippet ummap std
	std::unordered_multimap<${1:Key}, ${2:T}> ${3};
snippet stack std
	std::stack<${1:T}> ${2};
snippet queue std
	std::queue<${1:T}> ${2};
snippet pqueue std
	std::priority_queue<${1:T}> ${2};
##
## Access Modifiers
snippet pri
	private
snippet pro
	protected
snippet pub
	public
snippet fr
	friend
snippet mu
	mutable
##
## Class
snippet cl
	class ${1:`vim_snippets#Filename('$1', 'name')`}
	{
	public:
		$1( ${2} );

		~$1();

	private:
		${0:/* data */}

		$1();

		$1 const& operator=( $1 const& );

		$1( $1 const& );
	};
snippet mfun
	${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
		${0}
	}
snippet ns
	namespace ${1:`vim_snippets#Filename('', 'my')`} {
		${0}
	} /* namespace $1 */
##
## Input/Output
snippet cout
	std::cout << ${1} << std::endl;
snippet cin
	std::cin >> ${1};
##
## Iteration
snippet fori
	for ( int ${2:i} = 0 ; $2 < ${1:count} ; $2${3:++} ) {
		${4}
	}
snippet fore
	for ( ${1:auto} ${2:i} : ${3:container} ) {
		${4}
	}
snippet iter
	for ( ${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin() ; $4 != $5.end() ; ++$4 ) {
		${6}
	}
snippet itera
	for ( auto ${1:i} = ${2:container}.begin() ; $1 != $2.end() ; ++$1 ) {
		${3:std::cout << *$1 << std::endl;}
	}
##
## Lambdas
# lamda (one line)
snippet ld
	[${1}](${2}){${3}}
# lambda (multi-line)
snippet lld
	[${1}](${2}){
		${3}
	}
