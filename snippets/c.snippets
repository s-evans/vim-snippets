##
## Other
snippet to
	// TODO: ${0}
snippet go
	goto ${1:label};
snippet so
	sizeof( ${1:type} )
snippet fb
	//----------------------------------------------------------------------------------------------------------------------
	// ${1}
	//----------------------------------------------------------------------------------------------------------------------
##
## cstdlib
snippet malloc cstdlib
	malloc( ${1:size} )
snippet free cstdlib
	free( ${1:pointer} );
snippet realloc cstdlib
	realloc( ${1:pointer}, ${2:size} )
snippet calloc cstdlib
	calloc( ${1:num}, ${2:size} )
snippet atof cstdlib
	atof( ${1:str} )
snippet atoi cstdlib
	atoi( ${1:str} )
snippet atol cstdlib
	atol( ${1:str} )
snippet atoll cstdlib
	atoll( ${1:str} )
snippet strtod cstdlib
	strtod( ${1:str}, ${2:endptr} )
snippet strtof cstdlib
	strtof( ${1:str}, ${2:endptr} )
snippet strtol cstdlib
	strtol( ${1:str}, ${2:endptr} )
snippet strtold cstdlib
	strtold( ${1:str}, ${2:endptr} )
snippet strtoll cstdlib
	strtoll( ${1:str}, ${2:endptr}, ${3:base} )
snippet strtoul cstdlib
	strtoul( ${1:str}, ${2:endptr}, ${3:base} )
snippet strtoull cstdlib
	strtoull( ${1:str}, ${2:endptr}, ${3:base} )
##
## Main
snippet main
	int main( int argc, const char *argv[] )
	{
		${0}
		return 0;
	}
snippet mainn
	int main( void )
	{
		${0}
		return 0;
	}
##
## Preprocessor
# #include <...>
snippet inc
	#include <${1:stdio}.h>
# #include "..."
snippet Inc
	#include "${1:`vim_snippets#Filename("$1.h")`}"
# ifndef...define...endif
snippet ndef
	#ifndef $1
	#define ${1:SYMBOL} ${2:value}
	#endif
# define
snippet def
	#define
# ifdef...endif
snippet ifdef
	#ifdef ${1:FOO}
		${2:#define }
	#endif
# if
snippet #if
	#if ${1:FOO}
		${0}
	#endif
# header include guard
snippet once
	#ifndef ${1:`toupper(vim_snippets#Filename('$1_H', 'UNTITLED_H'))`}
	#define $1

	${0}

	#endif // $1
##
## Control Statements
snippet if
	if ( ${1:/* condition */} ) {
		${2}
	}
snippet el
	else {
		${1}
	}
snippet elif
	else if ( ${1:/* condition */} ) {
		${2}
	}
snippet ifi
	if ( ${1:/* condition */} ) ${2};
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
snippet switch
	switch ( ${1:/* variable */} ) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
		default:
			${6}
	}
snippet switchndef
	switch ( ${1:/* variable */} ) {
		case ${2:/* variable case */}:
			${3}
			${4:break;}${5}
	}
snippet case
	case ${1:/* variable case */}:
		${2}
		${3:break;}
##
## Loops
snippet for
	for ( ${2:i} = 0; $2 < ${1:count}; $2${3:++} ) {
		${4}
	}
snippet forr
	for ( ${1:i} = ${2:0}; ${3:$1 < 10}; $1${4:++} ) {
		${5}
	}
snippet wh
	while ( ${1:/* condition */} ) {
		${2}
	}
snippet do
	do {
		${2}
	} while ( ${1:/* condition */} );
##
## Functions
snippet fun
	${1:void} ${2:function_name}( ${3} )
	{
		${4}
	}
snippet fund
	${1:void} ${2:function_name}( ${3} );
##
## Types
snippet td
	typedef ${1:int} ${2:MyCustomType};
snippet st
	struct ${1:`vim_snippets#Filename('$1_t', 'name')`} {
		${2:/* data */}
	} ${3: /* optional variable list */};
snippet tds
	typedef struct ${2:_$1} {
		${3:/* data */}
	} ${1:`vim_snippets#Filename('$1_t', 'name')`};
snippet tde
	typedef enum {
		${1:/* data */}
	} ${2:foo};
##
## Input/Output
snippet pr
	printf( "${1:%s}\n"${2} );
snippet fpr
	fprintf( ${1:stderr}, "${2:%s}\n"${3} );
snippet getopt
	int choice;
	while ( 1 )
	{
		static struct option long_options[] =
		{
			/* Use flags like so:
			{"verbose",	no_argument,	&verbose_flag, 'V'}*/
			/* Argument styles: no_argument, required_argument, optional_argument */
			{"version", no_argument,	0,	'v'},
			{"help",	no_argument,	0,	'h'},
			${1}
			{0,0,0,0}
		};

		int option_index = 0;

		/* Argument parameters:
			no_argument: " "
			required_argument: ":"
			optional_argument: "::" */

		choice = getopt_long( argc, argv, "vh",
					long_options, &option_index);

		if (choice == -1)
			break;

		switch( choice )
		{
			case 'v':
				${2}
				break;

			case 'h':
				${3}
				break;

			case '?':
				/* getopt_long will have already printed an error */
				break;

			default:
				/* Not sure how to get here... */
				return EXIT_FAILURE;
		}
	}

	/* Deal with non-option arguments here */
	if ( optind < argc )
	{
		while ( optind < argc )
		{
			${0}
		}
	}
## 
## stdio
snippet clearerr stdio
	clearerr()
snippet fclose stdio
	fclose( ${1:stream} )
snippet feof stdio
	feof( ${1:stream} )
snippet ferror stdio
	ferror( ${1:stream} )
snippet fflush stdio
	fflush( ${1:stream} )
snippet fgetc stdio
	fgetc( ${1:stream} )
snippet fgetpos stdio
	fgetpos( ${1:stream}, ${2:pos} )
snippet fgets stdio
	fgets( ${1:string}, ${2:num}, ${3:stream} )
snippet fopen stdio
	fopen( ${1:path}, ${2:mode} )
snippet fprintf stdio
	fprintf( ${1:stream}, ${2:fmt}, ${3:args} )
snippet fputc stdio
	fputc( ${1:char}, ${2:stream} )
snippet fputs stdio
	fputs( ${1:str}, ${2:stream} ) 
snippet fread stdio
	fread( ${1:ptr}, ${2:size}, ${3:count}, ${4:stream} )
snippet freopen stdio
	freopen( ${1:filename}, ${2:mode}, ${3:stream} )
snippet fscanf stdio
	fscanf( ${1:stream}, ${2:fmt}, ${3:args} )
snippet fseek stdio
	fseek( ${1:stream}, ${2:offset}, ${3:origin} )
snippet fsetpos stdio
	fsetpos( ${1:stream}, ${2:pos} )
snippet ftell stdio
	ftell( ${1:stream} )
snippet fwrite stdio
	fwrite( ${1:ptr}, ${2:size}, ${3:count}, ${4:stream} )
snippet getc stdio
	getc( ${1:stream} )
snippet getchar stdio
	getchar()
snippet gets stdio
	gets( ${1:str} )
snippet perror stdio
	perror( ${1:str} )
snippet printf stdio
	printf( ${1:fmt}, ${2:args} )
snippet putc stdio
	putc( ${1:character}, ${2:stream} )
snippet putchar stdio
	putchar( ${1:character} )
snippet puts stdio
	puts( ${1:str} )
snippet remove stdio
	remove( ${1:filename} )
snippet rename stdio
	rename( ${1:current}, ${2:new} )
snippet rewind stdio
	rewind( ${1:stream} )
snippet scanf stdio
	scanf( ${1:fmt}, ${2:args} )
snippet setbuf stdio
	setbuf( ${1:stream}, ${2:buffer} )
snippet setvbuf stdio
	setvbuf( ${1:stream}, ${2:buffer}, ${3:mode}, ${4:size} )
snippet snprintf stdio
	snprintf( ${1:string}, ${2:size}, ${3:format}, ${4:args} )
snippet sprintf stdio
	sprintf( ${1:string}, ${2:format}, ${3:args} )
snippet sscanf stdio
	sscanf( ${1:string}, ${2:format}, ${3:args} )
snippet tmpfile stdio
	tmpfile()
snippet tmpnam stdio
	tmpnam( ${1:str} )
snippet ungetc stdio
	ungetc( ${1:character}, ${2:stream} )
snippet vfprintf stdio
	vfprintf( ${1:stream}, ${2:format}, ${3:va_list} )
snippet vfscanf stdio
	vfscanf( ${1:stream}, ${2:format}, ${3:va_list} )
snippet vprintf stdio
	vprintf( ${1:format}, ${2:va_list} )
snippet vscanf stdio
	vscanf( ${1:format}, ${2:va_list} )
snippet vsnprintf stdio
	vsnprintf( ${1:string}, ${2:size}, ${3:format}, ${4:va_list} )
snippet vsprintf stdio
	vsprintf( ${1:string}, ${2:format}, ${3:va_list} )
snippet vsscanf stdio
	vsscanf( ${1:string}, ${2:format}, ${3:va_list} )
##
## String
snippet memchr string
	memchr( ${1:ptr}, ${2:value}, ${3:num} )
snippet memcmp string
	memcmp( ${1:ptr1}, ${2:ptr2}, ${3:num} )
snippet memcpy string
	memcpy( ${1:destination}, ${2:source}, ${3:num} )
snippet memmove string
	memmove( ${1:destination}, ${2:source}, ${3:num} )
snippet memset string
	memset( ${1:ptr}, ${2:value}, ${3:num} )
snippet strcat string
	strcat( ${1:destination}, ${2:source} )
snippet strchr string
	strchr( ${1:str}, ${2:character} )
snippet strcmp string
	strcmp( ${1:str1}, ${2:str2} )
snippet strcoll string
	strcoll( ${1:str1}, ${2:str2} )
snippet strcpy string
	strcpy( ${1:destination}, ${2:source} )
snippet strcspn string
	strcspn( ${1:str1}, ${2:str2} )
snippet strerror string
	strerror( ${1:errno} )
snippet strlen string
	strlen( ${1:str} )
snippet strncat string
	strncat( ${1:destination}, ${2:source}, ${3:num} )
snippet strncmp string
	strncmp( ${1:ptr1}, ${2:ptr2}, ${3:num} )
snippet strncpy string
	strncpy( ${1:destination}, ${2:source}, ${3:num} )
snippet strpbrk string
	strpbrk( ${1:str1}, ${2:str2} )
snippet strrchr string
	strrchr( ${1:str}, ${2:character} )
snippet strspn string
	strspn( ${1:str1}, ${2:str2} )
snippet strstr string
	strstr( ${1:str1}, ${2:str2} )
snippet strtok string
	strtok( ${1:str}, ${2:delimiters} )
snippet strxfrm string
	strxfrm( ${1:destination}, ${2:source}, ${3:num} )
##
## Miscellaneous
snippet .
	[${1}]
snippet gpl
	/*
	 * This program is free software; you can redistribute it and/or modify
	 * it under the terms of the GNU General Public License as published by
	 * the Free Software Foundation; either version 2 of the License, or
	 * (at your option) any later version.
	 *
	 * This program is distributed in the hope that it will be useful,
	 * but WITHOUT ANY WARRANTY; without even the implied warranty of
	 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 * GNU General Public License for more details.
	 *
	 * You should have received a copy of the GNU General Public License
	 * along with this program; if not, see <http://www.gnu.org/licenses/>.
	 *
	 * Copyright (C) ${1:Author}, `strftime("%Y")`
	 */

	${0}
